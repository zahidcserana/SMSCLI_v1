{"version":3,"file":"ngx-stripe.js","sources":["../../src/services/window-ref.service.ts","../../src/services/document-ref.service.ts","../../src/services/api-loader.service.ts","../../src/interfaces/stripe.ts","../../src/interfaces/sources.ts","../../src/interfaces/token.ts","../../src/services/stripe-instance.class.ts","../../src/services/stripe.service.ts","../../src/services/stripe-factory.service.ts","../../src/components/stripe-card.component.ts","../../src/modules/ngx-stripe.module.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowRef {\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {}\n\n  public getNativeWindow(): Window {\n    if (isPlatformBrowser(this.platformId)) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {}\n\n  public getNativeDocument(): Document {\n    if (isPlatformBrowser(this.platformId)) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { WindowRef } from './window-ref.service';\nimport { DocumentRef } from './document-ref.service';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  public status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    @Inject(PLATFORM_ID) public platformId: any,\n    public window: WindowRef,\n    public document: DocumentRef\n  ) {}\n\n  public asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    const status: Status = this.status.getValue();\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else if (!status.loaded && !status.loading) {\n      this.status.next({\n        ...status,\n        loading: true\n      });\n\n      const script = this.document.getNativeDocument().createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.src = 'https://js.stripe.com/v3/';\n\n      script.onload = () => {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      };\n\n      script.onerror = () => {\n        this.status.next({\n          error: true,\n          loaded: false,\n          loading: false\n        });\n      };\n\n      this.document.getNativeDocument().body.appendChild(script);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  Pii,\n  PiiData\n} from './token';\nimport { SourceData, SourceResult, SourceParams } from './sources';\nimport { PaymentRequestOptions } from './payment-request';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>(\n  'Stripe Publishable Key'\n);\nexport const STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(\n    account: BankAccount,\n    bankAccountData: BankAccountData\n  ): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n  paymentRequest(options: PaymentRequestOptions): any;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status:\n      | 'new'\n      | 'validated'\n      | 'verified'\n      | 'verification_failded'\n      | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n\nexport function isBankAccountData(\n  bankAccountData: any\n): bankAccountData is BankAccountData {\n  return (\n    'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company')\n  );\n}\n\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n","import { Inject, PLATFORM_ID } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\nexport class StripeInstance implements StripeServiceInterface {\n  public stripe$: BehaviorSubject<StripeJS | undefined> = new BehaviorSubject<\n    StripeJS | undefined\n  >(undefined);\n\n  constructor(\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef,\n    public key: string,\n    public options?: Options\n  ) {\n    this.loader\n      .asStream()\n      .filter((status: Status) => status.loaded === true)\n      .first()\n      .map(() => (this.window.getNativeWindow() as any).Stripe)\n      .subscribe((Stripe: any) => {\n        const stripe = this.options\n          ? (Stripe(this.key, this.options) as StripeJS)\n          : (Stripe(this.key) as StripeJS);\n\n        this.stripe$.next(stripe);\n      });\n  }\n\n  public getInstance(): StripeJS | undefined {\n    return this.stripe$.getValue();\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .map(stripe => (stripe as StripeJS).elements(options))\n      .first();\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isBankAccount(a) && isBankAccountData(b)) {\n          return Observable.fromPromise(stripe.createToken(a, b));\n        } else if (isPii(a) && isPiiData(b)) {\n          return Observable.fromPromise(stripe.createToken(a, b));\n        } else {\n          return Observable.fromPromise(\n            stripe.createToken(a as Element, b as CardDataOptions | undefined)\n          );\n        }\n      })\n      .first();\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isSourceData(a)) {\n          return Observable.fromPromise(stripe.createSource(a as SourceData));\n        }\n        return Observable.fromPromise(stripe.createSource(a as Element, b));\n      })\n      .first();\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe$\n      .asObservable()\n      .filter(stripe => Boolean(stripe))\n      .switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return Observable.fromPromise(stripe.retrieveSource(source));\n      })\n      .first();\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    const stripe = this.getInstance();\n    if (stripe) {\n      return stripe.paymentRequest(options);\n    }\n    return undefined;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeInstance } from './stripe-instance.class';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\n@Injectable()\nexport class StripeService implements StripeServiceInterface {\n  public stripe: StripeInstance;\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) public key: string,\n    @Inject(STRIPE_OPTIONS) public options: Options,\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef\n  ) {\n    if (key) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n    }\n  }\n\n  public getStripeReference(): Observable<any> {\n    return this.loader\n      .asStream()\n      .filter((status: Status) => status.loaded === true)\n      .map(() => (this.window.getNativeWindow() as any).Stripe);\n  }\n\n  public getInstance() {\n    return this.stripe.getInstance();\n  }\n\n  public setKey(key: string, options?: Options) {\n    return this.changeKey(key, options);\n  }\n\n  public changeKey(key: string, options?: Options) {\n    this.stripe = new StripeInstance(this.loader, this.window, key, options);\n\n    return this.stripe;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe.elements(options);\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe.createToken(a, b);\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe.createSource(a, b);\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe.retrieveSource(source);\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe.paymentRequest(options);\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { LazyStripeAPILoader } from './api-loader.service';\nimport { WindowRef } from './window-ref.service';\nimport { StripeInstance } from './stripe-instance.class';\n\n@Injectable()\nexport class StripeFactoryService {\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) public baseKey: string,\n    @Inject(STRIPE_OPTIONS) public baseOptions: string,\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef\n  ) {}\n\n  public create(key: string, options?: Options): StripeInstance {\n    return new StripeInstance(this.loader, this.window, key, options);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  Element as StripeElement,\n  ElementOptions,\n  ElementEventType\n} from '../interfaces/element';\nimport { StripeService } from '../services/stripe.service';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { StripeInstance } from '../services/stripe-instance.class';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #stripeCard></div>`\n})\nexport class StripeCardComponent implements OnInit {\n  @Output() public card = new EventEmitter<StripeElement>();\n  @Output()\n  public on = new EventEmitter<{ type: ElementEventType; event: any }>();\n\n  @ViewChild('stripeCard') public stripeCard: ElementRef;\n  public element: StripeElement;\n  @Input()\n  public set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\n  public options$ = new BehaviorSubject<ElementOptions>({});\n  @Input()\n  public set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n  public elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n  @Input()\n  public set stripe(stripeIn: StripeInstance) {\n    this.stripe$.next(stripeIn);\n  }\n  public stripe$ = new BehaviorSubject<StripeInstance | null>(null);\n\n  constructor(public stripeService: StripeService) {}\n\n  public ngOnInit() {\n    const elements$: Observable<Elements> = Observable.combineLatest(\n      this.elementsOptions$.asObservable(),\n      this.stripe$.asObservable()\n    ).switchMap(([options, stripe]) => {\n      if (stripe) {\n        if (Object.keys(options).length > 0) {\n          return stripe.elements(options);\n        }\n        return stripe.elements();\n      } else {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n        return this.stripeService.elements();\n      }\n    });\n    Observable.combineLatest(\n      elements$,\n      this.options$.asObservable().filter(options => Boolean(options))\n    ).subscribe(([elements, options]) => {\n      this.element = elements.create('card', options);\n\n      this.element.on('blur', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'blur'\n        })\n      );\n\n      this.element.on('change', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'change'\n        })\n      );\n\n      this.element.on('click', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'click'\n        })\n      );\n\n      this.element.on('focus', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'focus'\n        })\n      );\n\n      this.element.on('ready', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'ready'\n        })\n      );\n\n      this.element.mount(this.stripeCard.nativeElement);\n\n      this.card.emit(this.element);\n    });\n  }\n\n  public getCard(): StripeElement {\n    return this.element;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LazyStripeAPILoader } from '../services/api-loader.service';\nimport { StripeService } from '../services/stripe.service';\nimport { StripeFactoryService } from '../services/stripe-factory.service';\n\nimport { WindowRef } from '../services/window-ref.service';\nimport { DocumentRef } from '../services/document-ref.service';\n\nimport {\n  Options,\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS\n} from '../interfaces/stripe';\nimport { StripeCardComponent } from '../components/stripe-card.component';\n\nimport 'rxjs/add/observable/combineLatest';\nimport 'rxjs/add/observable/fromPromise';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/map';\n\n@NgModule({\n  declarations: [StripeCardComponent],\n  exports: [StripeCardComponent]\n})\nexport class NgxStripeModule {\n  public static forRoot(\n    publishableKey?: string,\n    options?: Options\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n\n  public static forChild(\n    publishableKey?: string,\n    options?: Options\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"],"names":["BehaviorSubject","Observable"],"mappings":"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"}