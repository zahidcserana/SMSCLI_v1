(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.stripe = global.ng.stripe || {}, global.ng.stripe.checkout = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

var StripeCheckoutHandler = /** @class */ (function () {
    /**
     * Constructor configures the Stripe Checkout handler with given config options.
     *
     * @param {IStripeCheckoutConfig} config
     */
    function StripeCheckoutHandler(config) {
        var _this = this;
        var tokenFn = config.token;
        config.token = function (token, args) {
            if (tokenFn != null) {
                tokenFn(token, args);
            }
            if (_this.resolveFn != null) {
                _this.resolveFn(token);
            }
        };
        this.stripeCheckout = StripeCheckout.configure(config);
    }
    /**
     * Open the Stripe Checkout window for this handler.
     *
     * @param {IStripeCheckoutOptions} options Options override initial config.
     * @returns {Promise<IStripeCheckoutToken>}
     */
    /**
       * Open the Stripe Checkout window for this handler.
       *
       * @param {IStripeCheckoutOptions} options Options override initial config.
       * @returns {Promise<IStripeCheckoutToken>}
       */
    StripeCheckoutHandler.prototype.open = /**
       * Open the Stripe Checkout window for this handler.
       *
       * @param {IStripeCheckoutOptions} options Options override initial config.
       * @returns {Promise<IStripeCheckoutToken>}
       */
    function (options) {
        var _this = this;
        var closedFn = options.closed;
        options.closed = function () {
            if (closedFn != null) {
                closedFn();
            }
            _this.rejectFn('stripe_closed');
        };
        var promise = new Promise(function (resolve, reject) {
            _this.resolveFn = resolve;
            _this.rejectFn = reject;
        });
        this.stripeCheckout.open(options);
        return promise;
    };
    /**
     * Close the currently open Stripe Checkout window if any.
     */
    /**
       * Close the currently open Stripe Checkout window if any.
       */
    StripeCheckoutHandler.prototype.close = /**
       * Close the currently open Stripe Checkout window if any.
       */
    function () {
        this.stripeCheckout.close();
    };
    return StripeCheckoutHandler;
}());

var StripeCheckoutLoader = /** @class */ (function () {
    function StripeCheckoutLoader() {
    }
    /**
     * Create a Stripe Checkout instance as soon as Stripe has loaded.
     * @param {IStripeCheckoutConfig} config
     * @returns {Promise<StripeCheckoutHandler>}
     */
    /**
       * Create a Stripe Checkout instance as soon as Stripe has loaded.
       * @param {IStripeCheckoutConfig} config
       * @returns {Promise<StripeCheckoutHandler>}
       */
    StripeCheckoutLoader.prototype.createHandler = /**
       * Create a Stripe Checkout instance as soon as Stripe has loaded.
       * @param {IStripeCheckoutConfig} config
       * @returns {Promise<StripeCheckoutHandler>}
       */
    function (config) {
        return this.load().then(function () {
            return new StripeCheckoutHandler(config);
        });
    };
    /**
     * Load or wait for the Stripe checkout library to load.
     * @returns {Promise<void>}
     */
    /**
       * Load or wait for the Stripe checkout library to load.
       * @returns {Promise<void>}
       */
    StripeCheckoutLoader.prototype.load = /**
       * Load or wait for the Stripe checkout library to load.
       * @returns {Promise<void>}
       */
    function () {
        if (!this.loaded) {
            // No cached Promise exist, so we have to load checkout.js.
            this.loaded = new Promise(function (resolve, reject) {
                // Create script element.
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://checkout.stripe.com/checkout.js';
                script.onerror = function (e) { return reject(e); };
                if (script.readyState) { // IE fallback.
                    // IE fallback.
                    script.onreadystatechange = function () {
                        if (script.readyState === "loaded" || script.readyState === "complete") {
                            script.onreadystatechange = null;
                            resolve();
                        }
                    };
                }
                else { // Other browsers.
                    // Other browsers.
                    script.onload = function () {
                        resolve();
                    };
                }
                document.getElementsByTagName('body')[0].appendChild(script);
            });
        }
        // Return cached Promise.
        return this.loaded;
    };
    StripeCheckoutLoader.decorators = [
        { type: core.Injectable },
    ];
    return StripeCheckoutLoader;
}());

var StripeCheckoutModule = /** @class */ (function () {
    function StripeCheckoutModule() {
    }
    StripeCheckoutModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        StripeCheckoutLoader,
                    ],
                },] },
    ];
    return StripeCheckoutModule;
}());

exports.StripeCheckoutModule = StripeCheckoutModule;
exports.StripeCheckoutLoader = StripeCheckoutLoader;
exports.StripeCheckoutHandler = StripeCheckoutHandler;

Object.defineProperty(exports, '__esModule', { value: true });

})));
