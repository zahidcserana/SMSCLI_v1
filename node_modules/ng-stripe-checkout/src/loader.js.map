{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../src/loader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAC;;;;IAQhD;;;;OAIG;;;;;;IACI,4CAAa;;;;;IAApB,UAAqB,MAA6B;QAChD,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;YACtB,OAAO,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC;SAC1C,CAAC,CAAC;KACJ;IAED;;;OAGG;;;;;IACI,mCAAI;;;;IAAX;QACE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;;YAEhB,IAAI,CAAC,MAAM,GAAG,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;;gBAE9C,IAAI,MAAM,GAAQ,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACnD,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;gBAChC,MAAM,CAAC,GAAG,GAAG,yCAAyC,CAAC;gBACvD,MAAM,CAAC,OAAO,GAAG,UAAC,CAAM,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC;gBACvC,IAAI,MAAM,CAAC,UAAU,EAAE,EAAG,eAAe;;oBACvC,MAAM,CAAC,kBAAkB,GAAG;wBAC1B,IAAI,MAAM,CAAC,UAAU,KAAK,QAAQ,IAAI,MAAM,CAAC,UAAU,KAAK,UAAU,EAAE;4BACtE,MAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC;4BACjC,OAAO,EAAE,CAAC;yBACX;qBACF,CAAC;iBACH;qBAAM,EAAG,kBAAkB;;oBAC1B,MAAM,CAAC,MAAM,GAAG;wBACd,OAAO,EAAE,CAAC;qBACX,CAAC;iBACH;gBACD,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;aAC9D,CAAC,CAAC;SACJ;;QAGD,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;gBA/CF,UAAU;;+BAJX;;SAKa,oBAAoB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { StripeCheckoutHandler } from './handler';\nimport { IStripeCheckoutConfig } from './config.model';\n\n@Injectable()\nexport class StripeCheckoutLoader {\n\n  private loaded: Promise<void>;\n\n  /**\n   * Create a Stripe Checkout instance as soon as Stripe has loaded.\n   * @param {IStripeCheckoutConfig} config\n   * @returns {Promise<StripeCheckoutHandler>}\n   */\n  public createHandler(config: IStripeCheckoutConfig): Promise<StripeCheckoutHandler> {\n    return this.load().then(() => {\n      return new StripeCheckoutHandler(config);\n    });\n  }\n\n  /**\n   * Load or wait for the Stripe checkout library to load.\n   * @returns {Promise<void>}\n   */\n  public load(): Promise<void> {\n    if (!this.loaded) {\n      // No cached Promise exist, so we have to load checkout.js.\n      this.loaded = new Promise<void>((resolve, reject) => {\n        // Create script element.\n        let script: any = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://checkout.stripe.com/checkout.js';\n        script.onerror = (e: any) => reject(e);\n        if (script.readyState) {  // IE fallback.\n          script.onreadystatechange = () => {\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n              script.onreadystatechange = null;\n              resolve();\n            }\n          };\n        } else {  // Other browsers.\n          script.onload = () => {\n            resolve();\n          };\n        }\n        document.getElementsByTagName('body')[0].appendChild(script);\n      });\n    }\n\n    // Return cached Promise.\n    return this.loaded;\n  }\n}\n"]}