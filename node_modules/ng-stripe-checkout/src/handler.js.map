{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../src/handler.ts"],"names":[],"mappings":"AAIA,IAAA;IAqBE;;;;OAIG;IACH,+BAAY,MAA6B;QAAzC,iBAcC;QAbC,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC;QAE7B,MAAM,CAAC,KAAK,GAAG,UAAC,KAAK,EAAE,IAAI;YACzB,IAAI,OAAO,IAAI,IAAI,EAAE;gBACnB,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACtB;YAED,IAAI,KAAI,CAAC,SAAS,IAAI,IAAI,EAAE;gBAC1B,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACvB;SACF,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KACxD;IAED;;;;;OAKG;;;;;;;IACI,oCAAI;;;;;;IAAX,UAAY,OAA+B;QAA3C,iBAmBC;QAlBC,IAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC;QAEhC,OAAO,CAAC,MAAM,GAAG;YACf,IAAI,QAAQ,IAAI,IAAI,EAAE;gBACpB,QAAQ,EAAE,CAAC;aACZ;YAED,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;SAChC,CAAC;QAEF,IAAM,OAAO,GAAG,IAAI,OAAO,CAAuB,UAAC,OAAO,EAAE,MAAM;YAChE,KAAI,CAAC,SAAS,GAAG,OAAO,CAAC;YACzB,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;SACxB,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAElC,OAAO,OAAO,CAAC;KAChB;IAED;;OAEG;;;;IACI,qCAAK;;;IAAZ;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;KAC7B;gCA9EH;IAgFC,CAAA;AA5ED,iCA4EC","sourcesContent":["import { IStripeCheckoutConfig, IStripeCheckoutOptions, IStripeCheckoutToken, } from './config.model';\n\ndeclare let StripeCheckout: any;\n\nexport class StripeCheckoutHandler {\n\n  /**\n   * Holds the Stripe Checkout instance.\n   */\n  private stripeCheckout: any;\n\n  /**\n   * Holds the current resolve function.\n   *\n   * @type {(token: IStripeCheckoutToken) => void}\n   */\n  private resolveFn: (token: IStripeCheckoutToken) => void;\n\n  /**\n   * Holds the current reject function.\n   *\n   * @type {(err: any) => void}\n   */\n  private rejectFn: (err: any) => void;\n\n  /**\n   * Constructor configures the Stripe Checkout handler with given config options.\n   *\n   * @param {IStripeCheckoutConfig} config\n   */\n  constructor(config: IStripeCheckoutConfig) {\n    const tokenFn = config.token;\n\n    config.token = (token, args) => {\n      if (tokenFn != null) {\n        tokenFn(token, args);\n      }\n\n      if (this.resolveFn != null) {\n        this.resolveFn(token);\n      }\n    };\n\n    this.stripeCheckout = StripeCheckout.configure(config);\n  }\n\n  /**\n   * Open the Stripe Checkout window for this handler.\n   *\n   * @param {IStripeCheckoutOptions} options Options override initial config.\n   * @returns {Promise<IStripeCheckoutToken>}\n   */\n  public open(options: IStripeCheckoutOptions): Promise<IStripeCheckoutToken> {\n    const closedFn = options.closed;\n\n    options.closed = () => {\n      if (closedFn != null) {\n        closedFn();\n      }\n\n      this.rejectFn('stripe_closed');\n    };\n\n    const promise = new Promise<IStripeCheckoutToken>((resolve, reject) => {\n      this.resolveFn = resolve;\n      this.rejectFn = reject;\n    });\n\n    this.stripeCheckout.open(options);\n\n    return promise;\n  }\n\n  /**\n   * Close the currently open Stripe Checkout window if any.\n   */\n  public close(): void {\n    this.stripeCheckout.close();\n  }\n\n}\n"]}