import { Injectable } from '@angular/core';
import { StripeCheckoutHandler } from './handler';
var StripeCheckoutLoader = /** @class */ (function () {
    function StripeCheckoutLoader() {
    }
    /**
     * Create a Stripe Checkout instance as soon as Stripe has loaded.
     * @param {IStripeCheckoutConfig} config
     * @returns {Promise<StripeCheckoutHandler>}
     */
    /**
       * Create a Stripe Checkout instance as soon as Stripe has loaded.
       * @param {IStripeCheckoutConfig} config
       * @returns {Promise<StripeCheckoutHandler>}
       */
    StripeCheckoutLoader.prototype.createHandler = /**
       * Create a Stripe Checkout instance as soon as Stripe has loaded.
       * @param {IStripeCheckoutConfig} config
       * @returns {Promise<StripeCheckoutHandler>}
       */
    function (config) {
        return this.load().then(function () {
            return new StripeCheckoutHandler(config);
        });
    };
    /**
     * Load or wait for the Stripe checkout library to load.
     * @returns {Promise<void>}
     */
    /**
       * Load or wait for the Stripe checkout library to load.
       * @returns {Promise<void>}
       */
    StripeCheckoutLoader.prototype.load = /**
       * Load or wait for the Stripe checkout library to load.
       * @returns {Promise<void>}
       */
    function () {
        if (!this.loaded) {
            // No cached Promise exist, so we have to load checkout.js.
            this.loaded = new Promise(function (resolve, reject) {
                // Create script element.
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://checkout.stripe.com/checkout.js';
                script.onerror = function (e) { return reject(e); };
                if (script.readyState) { // IE fallback.
                    // IE fallback.
                    script.onreadystatechange = function () {
                        if (script.readyState === "loaded" || script.readyState === "complete") {
                            script.onreadystatechange = null;
                            resolve();
                        }
                    };
                }
                else { // Other browsers.
                    // Other browsers.
                    script.onload = function () {
                        resolve();
                    };
                }
                document.getElementsByTagName('body')[0].appendChild(script);
            });
        }
        // Return cached Promise.
        return this.loaded;
    };
    StripeCheckoutLoader.decorators = [
        { type: Injectable },
    ];
    return StripeCheckoutLoader;
}());
export { StripeCheckoutLoader };
//# sourceMappingURL=loader.js.map